import Head from "next/head";
import Script from "next/script";
import loader from "@monaco-editor/loader";
declare var window: Window &
  typeof globalThis & {
    ts: string;
  };

export default function Home() {
  const initialCode = `import React from "react"
  import { ChakraProvider, Box } from "@chakra-ui/react"
  
  function App(){
    return (
        <ChakraProvider>
            <Box bg="red.300">
                wow
            </Box>
        </ChakraProvider>
    )
  }
  `;

  return (
    <div>
      <Head>
        <title>Chakra Playground</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Script
        src="https://www.typescriptlang.org/js/vs.loader.js"
        async
        onLoad={async () => {
          require("monaco-editor/min/vs/language/typescript/tsWorker");
          const sandboxFactory = await import("@typescript/sandbox").then(
            (d) => d
          );
          loader.init().then((monaco) => {
            const isOK = monaco && window.ts && sandboxFactory;
            if (isOK) {
              document
                ?.getElementById("loader")
                ?.parentNode?.removeChild(document?.getElementById("loader")!);
            } else {
              console.error(
                "Could not get all the dependencies of sandbox set up!"
              );
              console.error("monaco", !!monaco, "ts", !!window.ts);
              return;
            }
            // Create a sandbox and embed it into the the div #monaco-editor-embed
            const sandboxConfig = {
              text: initialCode,
              compilerOptions: {},
              domID: "monaco-editor-embed",
            };

            const sandbox = sandboxFactory.createTypeScriptSandbox(
              sandboxConfig,
              monaco,
              window.ts
            );
            sandbox.editor.focus();
          });
        }}
      />
      <div id="loader">Loading...</div>
      <div id="monaco-editor-embed" style={{ height: "800px" }} />
    </div>
  );
}
